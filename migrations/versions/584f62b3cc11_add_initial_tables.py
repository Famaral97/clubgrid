"""add initial tables

Revision ID: 584f62b3cc11
Revises: 
Create Date: 2024-10-13 12:05:20.358705

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '584f62b3cc11'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clubs',
    sa.Column('id', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('country', sa.String(length=255), nullable=True),
    sa.Column('logo', sa.String(length=255), nullable=True),
    sa.Column('league', sa.String(length=255), nullable=True),
    sa.Column('has_animal', sa.Boolean(), nullable=True),
    sa.Column('has_winged_animal', sa.Boolean(), nullable=True),
    sa.Column('has_person', sa.Boolean(), nullable=True),
    sa.Column('has_football', sa.Boolean(), nullable=True),
    sa.Column('stars_number', sa.Integer(), nullable=True),
    sa.Column('colors_number', sa.String(length=50), nullable=True),
    sa.Column('has_numbers', sa.Boolean(), nullable=True),
    sa.Column('has_color_red', sa.Boolean(), nullable=True),
    sa.Column('has_color_blue', sa.Boolean(), nullable=True),
    sa.Column('has_color_green', sa.Boolean(), nullable=True),
    sa.Column('has_color_black', sa.Boolean(), nullable=True),
    sa.Column('league_titles', sa.Integer(), nullable=True),
    sa.Column('has_crown', sa.Boolean(), nullable=True),
    sa.Column('champions_league_titles', sa.Integer(), nullable=True),
    sa.Column('champions_league_runner_up', sa.Integer(), nullable=True),
    sa.Column('europa_league_titles', sa.Integer(), nullable=True),
    sa.Column('europa_league_runner_up', sa.Integer(), nullable=True),
    sa.Column('in_capital', sa.Boolean(), nullable=True),
    sa.Column('cup_titles', sa.Integer(), nullable=True),
    sa.Column('cup_runner_up', sa.Integer(), nullable=True),
    sa.Column('is_circular', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('conditions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('expression', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('grids',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('row_condition_1', sa.Integer(), nullable=True),
    sa.Column('row_condition_2', sa.Integer(), nullable=True),
    sa.Column('row_condition_3', sa.Integer(), nullable=True),
    sa.Column('column_condition_1', sa.Integer(), nullable=True),
    sa.Column('column_condition_2', sa.Integer(), nullable=True),
    sa.Column('column_condition_3', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['column_condition_1'], ['conditions.id'], ),
    sa.ForeignKeyConstraint(['column_condition_2'], ['conditions.id'], ),
    sa.ForeignKeyConstraint(['column_condition_3'], ['conditions.id'], ),
    sa.ForeignKeyConstraint(['row_condition_1'], ['conditions.id'], ),
    sa.ForeignKeyConstraint(['row_condition_2'], ['conditions.id'], ),
    sa.ForeignKeyConstraint(['row_condition_3'], ['conditions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('answers',
    sa.Column('grid_id', sa.Integer(), nullable=False),
    sa.Column('row_condition_id', sa.Integer(), nullable=False),
    sa.Column('column_condition_id', sa.Integer(), nullable=False),
    sa.Column('club_id', sa.String(length=255), nullable=False),
    sa.Column('is_solution', sa.Boolean(), nullable=True),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['club_id'], ['clubs.id'], ),
    sa.ForeignKeyConstraint(['column_condition_id'], ['conditions.id'], ),
    sa.ForeignKeyConstraint(['grid_id'], ['grids.id'], ),
    sa.ForeignKeyConstraint(['row_condition_id'], ['conditions.id'], ),
    sa.PrimaryKeyConstraint('grid_id', 'row_condition_id', 'column_condition_id', 'club_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('answers')
    op.drop_table('grids')
    op.drop_table('conditions')
    op.drop_table('clubs')
    # ### end Alembic commands ###
